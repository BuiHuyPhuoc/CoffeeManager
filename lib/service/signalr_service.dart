import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:signalr_netcore/signalr_client.dart';

final signalRProvider = Provider<SignalRService>((ref) {
  return SignalRService();
});

class SignalRService {
  late HubConnection _hubConnection;
  bool isConnected = false;
  int _retryCount = 0;
  final int _maxRetries = 3;
  Function()? onOrderUpdated;

  Future<void> initSignalR() async {
    if (isConnected) return; // Tr√°nh k·∫øt n·ªëi nhi·ªÅu l·∫ßn

    _hubConnection = HubConnectionBuilder()
        .withUrl("https://coffeehousee.site/orderHub",
            options: HttpConnectionOptions(
              transport: HttpTransportType.WebSockets,
            ))
        .build();

    _hubConnection.on("OrderUpdated", (List<Object?>? arguments) {
      print("üì¢ Nh·∫≠n t√≠n hi·ªáu c·∫≠p nh·∫≠t ƒë∆°n h√†ng");
      onOrderUpdated?.call();
    });

    _hubConnection.onclose(({Exception? error}) {
      print("üî¥ K·∫øt n·ªëi b·ªã m·∫•t: $error");
      isConnected = false;
      _retryCount = 0;
      reconnect();
    });

    await startConnection();
  }

  Future<void> startConnection() async {
    try {
      await _hubConnection.start();
      isConnected = true;
      print("‚úÖ K·∫øt n·ªëi SignalR th√†nh c√¥ng");
    } catch (e) {
      print("‚ùå L·ªói k·∫øt n·ªëi SignalR: $e");
      isConnected = false;
      reconnect();
    }
  }

  void reconnect() {
    if (_retryCount < _maxRetries) {
      _retryCount++;
      print("üîÑ Th·ª≠ k·∫øt n·ªëi l·∫°i (${_retryCount}/$_maxRetries)...");
      Future.delayed(
          Duration(seconds: 2 * _retryCount), () => startConnection());
    } else {
      print(
          "‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi SignalR sau $_maxRetries l·∫ßn th·ª≠. App v·∫´n ti·∫øp t·ª•c ch·∫°y.");
    }
  }
}
